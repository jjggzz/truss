// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (376B)
// NAME-service/handlers/handlers.gotemplate (63B)
// NAME-service/handlers/hooks.gotemplate (63B)
// NAME-service/handlers/middlewares.gotemplate (76B)
// NAME-service/svc/client/grpc/client.gotemplate (4.85kB)
// NAME-service/svc/client/http/client.gotemplate (107B)
// NAME-service/svc/endpoints.gotemplate (4.376kB)
// NAME-service/svc/server/run.gotemplate (3.373kB)
// NAME-service/svc/transport_grpc.gotemplate (3.056kB)
// NAME-service/svc/transport_http.gotemplate (108B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6e\xc3\x20\x18\x84\x67\x23\xf1\x0e\xa7\x4c\xce\x50\xb3\x77\x8d\x3b\x64\x69\xa2\x34\xed\x4e\xec\xc3\x46\x75\x70\x04\xd8\x51\x64\xf9\xdd\x2b\xec\xa8\xca\xc4\x7f\xdc\xc7\x1d\xa0\x14\x76\x7d\x4d\x34\x74\xf4\x3a\xb2\xc6\xe5\x81\xe8\x87\x10\x0a\x94\x07\x7c\x1e\xce\xf8\x28\xf7\xe7\x42\x0a\xa5\x70\xa2\x1f\x9c\xb3\xae\x59\x09\xdc\x6d\xd7\xa1\x1f\xe9\xef\xde\x46\x22\xb6\x36\xc0\xd8\x8e\x2b\xfd\x43\x1f\x6c\xef\xde\x31\x4d\xc5\x73\x9e\xe7\x57\x07\xa5\x8e\x7c\xb5\x93\x4e\x88\x14\x37\x5d\xfd\xea\x86\xb8\x6a\xeb\x92\xb6\xd7\x5b\xef\x23\x72\x29\xb2\x8d\xe9\x74\xb3\x49\x9b\x99\x52\x38\xa7\xce\x2f\xfa\xd1\x56\x4c\xe6\x34\x15\xfb\x85\x3d\xea\xd8\xe2\x6d\x9e\xa1\xc2\x58\xa9\x40\x3f\xd2\x6f\xa4\xd8\xa6\x83\x66\x70\xd5\x12\x9d\x6f\x31\xad\x39\xdf\xb7\x5a\x47\x42\xd7\xb5\x67\x08\x0c\xb0\x06\xb1\xe5\x03\xad\x1e\x89\x0b\xe9\xfe\x1f\x1a\xe9\xd2\x27\xa5\x6b\x04\x29\xb2\xb4\x16\x47\xed\x03\xf3\x25\x3c\x5b\xbb\x8a\xd3\xe0\xf2\xe7\x58\xd2\xe8\xa1\x8b\xbb\xde\x19\xdb\x6c\xa5\x98\xa5\xf8\x0b\x00\x00\xff\xff\x01\x9c\x46\x61\x78\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x17, 0x89, 0x8a, 0xaa, 0x99, 0xb2, 0x34, 0xd7, 0xec, 0xa8, 0x8f, 0x9a, 0x29, 0x93, 0x35, 0x8d, 0x2a, 0xd3, 0x33, 0x6e, 0x75, 0x6, 0x78, 0xd, 0x6a, 0xe9, 0xda, 0x80, 0xbd, 0x1c, 0x87}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xe0\x1d\xb2\x2e\x68\x0e\xe3\x09\x8a\xf9\xc6\x62\xdb\x48\x92\x61\x16\xa5\x77\x9f\xb7\x16\x17\x7a\x01\xa4\xf6\x48\x3f\x22\x58\x31\xd5\x7e\x2d\xf9\x5b\xa7\x74\x78\x70\x62\xfc\x7b\x4d\x04\x8f\x26\xd2\x71\x56\x47\x3c\xd5\xe8\x63\x4e\x6f\x13\x50\xe1\xbd\xef\xb7\x2b\x00\x00\xff\xff\xeb\xa6\xcc\x76\x4c\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xc8, 0x25, 0x5, 0xd9, 0x58, 0x94, 0xe2, 0x24, 0xe6, 0x20, 0x97, 0xcb, 0x5f, 0x27, 0x16, 0x26, 0x8f, 0x35, 0x28, 0xb6, 0x9c, 0xc7, 0xe2, 0xd5, 0x16, 0xe7, 0xae, 0xf7, 0x74, 0x21, 0x28}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\x4f\x6f\xdb\xb8\x12\x3f\xcb\x80\xbf\xc3\x3c\x23\x78\x90\x02\x95\x2e\xb0\xb7\x3e\xe4\x52\x27\x5d\xe4\xa1\x49\x83\x6c\xb0\x7b\x58\x2c\x16\xb4\x34\x96\xb9\x96\x49\x95\xa4\xed\xb8\x82\xbe\xfb\x62\x48\x51\x96\x1c\xdb\x4d\x0e\x8d\x48\x0e\x7f\x33\x9c\xdf\xfc\x4b\xa7\x53\x98\xa9\x1c\xa1\x40\x89\x9a\x5b\xcc\x61\xbe\x07\xab\x37\xc6\x30\xb8\xfd\x06\x8f\xdf\x5e\xe0\xee\xf6\xfe\x85\x8d\x47\xd3\x29\x3c\xa3\xde\x48\x29\x64\xe1\x25\x60\x27\xca\x12\xd4\x16\xf5\x4e\x0b\x8b\x60\x97\xc2\xc0\x42\x94\xe8\xa5\x7f\x47\x6d\x84\x92\x9f\xa0\xae\x59\xfb\xdd\x34\xfd\x13\xb8\xe5\x16\xfb\xc7\xb4\x26\x11\x27\xf4\xc4\xb3\x15\x2f\x10\x0a\x5d\x65\x50\x69\xb5\x15\x39\x1a\xe0\x50\x3c\x3f\xcd\x20\x2b\x05\x4a\x0b\x0b\xa5\xc1\x2e\x91\x20\x7e\x43\xbd\x15\x19\xb2\x47\xbe\xc6\xa6\x01\xd3\x2e\xc7\xa3\xaa\x87\x43\xd0\x62\x5d\x29\x6d\x21\x1e\x8f\xa2\x49\xa6\xa4\xc5\x57\x3b\xa1\x6f\xa1\xdc\xaf\x42\xa9\xa2\x44\x56\xa8\x92\xcb\x82\x29\x5d\x4c\xe9\x22\x1d\xad\x84\xfd\x21\xaa\x95\x90\x30\x29\x84\x5d\x6e\xe6\x2c\x53\xeb\xe9\x3f\xff\x14\xc5\x8f\x1f\xd3\x95\xb0\x53\xab\x79\x26\x64\x31\xf5\x52\x17\xd0\xa6\x6b\xb4\x3c\xe7\x96\x7b\x99\x03\x58\xb5\x2a\xa6\xa8\xb5\xd2\xe6\xf8\xa4\xa7\xa6\x54\xc5\x64\x3c\x02\x80\x73\x76\x98\xfc\xc2\x6d\x93\x4f\xcb\xf9\x85\x73\x94\x79\xa5\x84\x74\x3e\x21\x5b\xad\xe6\xd2\x38\x8f\x9d\x7f\xb5\x17\xe8\x1c\xd5\x17\x54\x15\x4a\xef\x8f\xd6\x2d\x1f\x0a\x15\xac\xb7\x62\x8d\x13\xa2\x24\x9a\x4e\xe1\x85\x82\xa7\x25\x91\x30\xea\x9a\xdd\x3b\xa6\x9e\xb8\x5d\xc2\x87\xa6\x81\xa9\xd9\x3a\xf8\x6a\x0e\x74\xfa\xf4\x79\x78\x3e\x19\x8f\x12\x02\x5b\x6c\x64\x06\x8f\xb8\xfb\xaa\x78\xfe\x99\x97\x5c\x66\x38\x73\xd1\x12\x0b\x69\x2c\x2d\x35\x98\x9c\xdd\x87\x45\x0a\xc4\x1b\x6a\xb8\xf6\x06\xb2\x17\xb7\x4c\xa1\x54\x45\x81\x9a\x7e\xb1\xaf\xee\x33\x81\xb8\x9a\xb3\x37\xb1\x46\x2b\x92\x77\xc4\x25\x50\x8f\x47\x91\xaa\xac\x50\xd2\xc0\xa7\x1b\xf8\xf3\xaf\x81\x17\x99\xb7\xe5\x9b\x13\xa8\x9b\xf1\x28\x12\x8b\x60\xc0\x7f\x6e\x40\x8a\xd2\x01\x90\x7f\x02\xc8\x0d\xf0\xaa\x42\x99\xc7\xed\x46\xda\x05\x22\xfb\xf5\xf9\x69\xe6\x01\x9d\xd1\xb1\x07\x4a\x92\xf1\x28\x72\x69\x14\x6d\xb9\x86\xc0\xa8\x01\xb3\xcd\xd8\x5d\x58\x8d\x47\x51\x5d\x7f\x80\x9d\xb0\x4b\xb8\xb2\x48\xb6\x32\x4a\x3e\x68\x7f\xe8\x50\x73\x59\x20\x5c\x09\x3a\xbc\xb2\xd8\x3d\xfc\x01\xed\x52\xe5\xa6\x2f\xee\xae\x0c\x97\xf4\xb3\xe0\x99\x55\x7a\x4f\x00\xed\x27\xd9\xfc\x45\xe9\x98\x8c\x79\xe0\x2b\xac\x6b\xb8\x12\xce\x95\xd0\x34\xc1\xba\x34\xbc\x9e\x31\x96\xbc\x45\x0d\x4f\x42\x4d\xc0\x26\x67\x8f\xb8\xbb\xeb\xf6\x0e\x44\xa7\x41\x69\x60\xf3\x04\xd6\xdc\xc7\x88\x43\x2a\xe7\x84\xf4\xac\x36\x32\x7f\x56\x73\x21\xe3\x83\xa2\x0b\x56\x18\x76\xf2\x0d\xe0\xf0\x9e\xd1\xea\x7d\xfc\x4b\x0a\x14\xed\xec\x41\x94\xa5\x30\x98\x29\x99\x5f\xff\xf2\xf1\xe3\xc7\xb4\x53\x7f\x84\x3f\x20\x02\x65\x1e\x5c\x3d\x58\x68\xb4\x1b\x2d\x0f\x76\xa4\x14\x3f\xe3\x51\xd3\xa5\xc1\x91\xcb\xd7\x7c\x85\x9d\x75\x24\x70\x21\x9e\x93\x0e\x96\x1d\x48\xc9\x7a\xc1\x6b\x80\x31\x76\x3e\xb6\x13\xa2\xe5\x4b\xcb\x3e\x85\x74\x6b\xac\x53\x1b\x08\x02\x63\xb5\x90\x45\x02\xf1\x09\x65\x42\xb1\x59\xa9\xcc\x51\x6a\x45\x99\x92\xd2\xed\x10\x61\xa4\x9f\xdd\x0a\x5e\x76\x90\xa9\xdf\xfb\x43\xd8\xe5\xbd\x34\x98\x6d\x34\xc6\x2e\x21\x28\xd1\xe8\x56\x2f\xcb\xa2\x60\x94\x14\x65\xea\xff\x41\xad\xe9\x80\x12\x33\x32\x87\xc4\x26\x5d\x8f\xb8\x8b\xbd\xf2\x81\x1b\x1c\x76\x8b\xd3\x77\x70\xec\xaf\x27\x29\x74\x16\xfb\xb4\x0c\x0d\xee\x11\x77\x2d\x83\x06\xb8\x0c\x1d\x0b\xe6\x3c\x5b\xf9\x36\x3c\xec\x75\x84\x82\x19\xa9\x64\x70\x6f\x41\x18\xea\x7c\x0e\x48\xa3\xa9\x94\x34\x62\x2e\x4a\x61\xf7\xa0\x16\xae\x27\x66\xbc\x2c\x51\x83\x55\x90\x0b\x5e\xa6\xc0\x65\x0e\x25\xa7\x94\xc9\xc8\xab\xa9\x17\x3a\x80\x1e\x2a\xa7\x7b\x25\x5c\x3b\x3f\x7a\x4a\x67\x6f\x9f\x7d\xb1\xb0\x75\xe9\x4b\x31\x32\x8c\x8a\xf7\x96\x50\xaa\x5c\x59\xd6\xea\x9c\x29\xb9\x10\x85\xab\x68\xd4\xf2\xff\x4e\x61\x41\x8c\xf8\xf2\x14\x54\x39\x46\x5b\xae\x16\xf1\x7f\xb3\xec\x5d\xac\xfb\x76\xcb\xfe\xd0\xbc\x8a\x51\xeb\x14\x26\x19\x97\x52\x59\x2a\xba\xe5\xbe\x05\x9f\x24\x21\x28\x7c\x59\x1d\x7a\xa2\x2b\xd0\x83\x6d\x1f\x88\xc7\xfe\xf9\x8c\x0b\xa5\x31\x6e\x07\x8f\xdf\x79\xb9\x41\xf3\xa2\x28\x41\x1f\xda\x99\x20\xce\x32\xb6\x44\x9e\xa3\x36\x49\x92\xb4\xed\x71\xa8\xf0\x67\x6d\xc5\x5d\x89\x2e\xa8\xf7\x02\xd1\x7b\xad\x48\x9d\x7c\x73\xae\x63\x44\xbd\xed\x6a\x55\xb8\x32\xd8\x36\x8c\x76\x88\xf3\x2c\x3b\xdf\xbf\xb3\xad\x44\x51\xe4\x42\xa0\xae\x5f\xd4\x57\xb5\x43\x1d\x0a\x6c\xaf\xbe\xbe\xa9\x19\xfe\x9a\xe7\x98\x34\x9d\xbf\x7a\x73\x44\xce\x23\xee\xda\x21\xa1\xbd\xec\xcb\x4c\x58\x4c\xea\x3a\xbc\xac\x69\x58\x5d\xf7\x8d\xf6\x9b\x93\x81\xac\x78\xb3\x7b\x27\x33\x95\x23\x79\xb8\x77\xfc\x8c\xdf\x37\x68\x6c\x27\x74\x8b\x27\x85\x5c\x76\x63\x27\xe5\x12\xe8\x57\xe5\xdc\x7c\x25\x58\x38\x7f\xd9\x57\xc1\x98\xba\xe9\x84\x07\x81\xc3\x18\x0b\x07\x49\xe7\xb4\x38\xf1\x5b\x81\x9e\xb6\xbf\xf4\x3f\xbb\xaf\x43\x19\x1f\x8c\x12\xb5\x93\xe9\xb3\x7a\x4c\x29\x0d\x68\x1e\xf3\x0d\x17\x9f\x7c\x5b\x3b\xcb\x55\xda\x37\x20\x6a\xfa\x3d\x6e\x3a\x05\x72\x16\x78\xea\xc0\xbb\x6f\x3c\xba\x6c\x4a\xfb\x37\xc8\x45\x5f\x53\x75\xe5\x30\x9c\x6c\x99\xbf\x11\x44\xbe\x50\xb1\xb4\x4b\xee\x0a\xf3\x16\xb5\x35\xc0\x1d\xb0\xab\xd9\x27\xde\x03\x1a\xa9\xa0\x58\x05\x1c\x36\x06\xf5\x87\x5c\xad\xb9\x90\x67\x44\xbd\x12\x06\x4f\x5a\xac\xb9\x16\xe5\x9e\xee\x2c\x36\x25\x08\x09\xbc\xad\x8a\xa1\x64\x5f\x7c\x4a\xfc\x37\xb4\x69\xce\x66\xfe\xb7\x2f\x4c\xcf\xce\x1a\x37\xda\x2c\x78\x86\x75\x93\x40\xdc\x5b\x0d\x6a\xb1\xb7\xbc\x6d\xb7\xee\x22\x8b\xaf\x7f\x1e\x86\xc9\x21\x5c\x1c\xc2\x81\xba\x5e\x40\x1d\x71\xe8\xf3\xe4\x9d\x1c\x5e\x4a\xaa\x93\x14\xfa\x0b\xad\xc4\x59\x06\x7f\xce\x8e\xd7\xe0\xa8\xbc\x40\xb7\x93\x7a\x1f\x85\x97\x5e\x72\x8a\xc1\x60\xc2\x7b\xf9\xfb\xee\xda\x65\x6b\xd1\x09\xee\xdc\xc1\x39\xea\xbe\x9f\x24\x6e\x3c\xb2\xfb\x0a\x07\x0d\x9a\xc6\xb9\x4d\x66\x9d\xce\xb6\x79\xc0\x9f\x7f\xf9\x19\xef\x90\xb2\xfd\x56\xe5\x59\x22\x17\xb8\x95\x63\x63\xad\x72\xb1\x10\x68\xfc\x80\xd2\x0d\x3f\x6e\x00\x70\x2a\x07\x00\x6e\x9e\xbc\xee\x5b\x91\xf8\xa7\x77\x43\xf0\xcc\xbe\x86\x0e\xf7\x1b\x75\xe9\x15\xee\xdd\x5c\x12\x66\xcf\x01\xdc\xf1\xa4\xaa\xe0\x14\xb6\x9f\x23\x54\xe8\x90\x70\x03\x04\xda\x1b\x04\x9d\xbf\xba\x61\xcf\x99\x71\xa9\xd9\x3a\x93\x82\xa7\x92\x93\x83\x43\x3f\x68\x8f\x8d\xcc\xec\xeb\xdb\x10\x59\xe7\x70\x1d\xfe\x9f\x81\x3d\xdc\x26\xc7\x12\xfe\x0d\xd4\x63\x2b\x2e\x06\x44\x45\x61\xc8\x5a\x1d\x86\x2c\x67\xa1\xef\xac\x62\x01\xdb\x14\x94\x3b\xcc\xec\x2b\x73\x2f\x8a\x57\x09\x8b\x5b\xfb\xff\x47\x87\x6d\x17\xf6\xd8\xdd\x84\xe4\x96\x29\xac\x52\xd8\xfa\xb6\xd3\xb4\x83\x55\x3b\xaa\x79\xf1\xc1\xb0\x76\xbd\xce\xe1\x06\xba\x97\xfc\x5f\x09\x19\x5f\xaf\xf3\xf4\xb0\xf5\x44\x97\x3c\x34\xfd\xb9\x98\xf4\x20\x5b\x2f\x65\xf6\xb5\xa3\xe3\xdf\x00\x00\x00\xff\xff\x13\x0f\x6a\xa0\xf2\x12\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 4850, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xc1, 0x16, 0x79, 0xfa, 0xcf, 0x8f, 0x2b, 0x3c, 0x4f, 0x2a, 0xfc, 0x38, 0xc5, 0xe0, 0x7e, 0x2d, 0x42, 0x7, 0x9c, 0x6f, 0x52, 0xc6, 0x59, 0x66, 0x51, 0xe6, 0x8e, 0x40, 0xf8, 0x5, 0x34}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6f\x1b\xbb\x11\x7d\x96\x00\xfd\x87\x89\xe0\xc2\x52\xb0\xa6\xde\x1d\xf8\xa1\x4d\xdc\xd6\x40\xf3\x81\xd8\x6d\x1f\x82\x20\xa0\x76\x47\xbb\x8c\xb9\x24\x43\x72\x25\x2b\x0b\xfd\xf7\x62\x48\xee\x6a\x65\x6d\x73\x93\xfb\x78\x71\x9f\x24\xf1\xe3\x70\xe6\x9c\x99\x43\x6a\xb5\x82\xd7\xba\x40\x28\x51\xa1\xe5\x1e\x0b\x58\xef\xc1\xdb\xc6\x39\x06\x6f\xde\xc3\xbb\xf7\x0f\x70\xfb\xe6\xee\x81\xcd\xa6\xab\x15\x7c\x44\xdb\x28\x25\x54\x19\x57\xc0\x4e\x48\x09\x7a\x8b\x76\x67\x85\x47\xf0\x95\x70\xb0\x11\x12\xe3\xea\xff\xa0\x75\x42\xab\x6b\x68\x5b\x96\xbe\x1f\x0e\xc3\x19\x78\xc3\x3d\x0e\xa7\xe9\x37\x2d\x99\x4d\x0d\xcf\x1f\x79\x89\xe0\xb6\x39\xfd\x5c\xad\xe0\xa1\x03\x87\x5c\x2b\xcf\x85\x72\x50\xa3\xaf\x74\xe1\xc0\x6b\xa8\xf9\x23\x82\x50\x85\xd8\x8a\xa2\xe1\x12\x50\x15\x46\x0b\xe5\x1d\x6c\xac\xae\xc1\xa1\xdd\x8a\x1c\x5d\x16\xa0\x2c\x7e\x6b\xd0\x79\xe0\xaa\x00\x8b\xce\x68\xe5\x10\xfc\xde\x60\x80\xa2\xb5\x94\x8b\x76\x78\x84\xc9\x80\x3b\xd8\xa1\x94\xf4\x89\x2a\xd7\x05\x5a\x47\x00\x01\xb0\xc0\x34\xb0\xd1\x36\xed\x0c\x70\x59\x18\xe0\x44\xd2\x06\x74\x63\xc1\x35\xc6\x68\x4b\x2c\x7b\xcb\x95\xa3\xef\x74\x9e\xe0\x52\x7c\xe7\x5e\x68\x15\xe0\x36\xda\xd6\xdc\x3b\x46\x99\x8b\x3a\x2c\x5a\xcc\xa6\x93\xf9\xa6\xf6\x73\xfa\x24\x02\xf0\x89\xbe\xd3\xaf\x52\xf8\xaa\x59\xb3\x5c\xd7\xab\xaf\x5f\xcb\xf2\xfb\xf7\xd5\xa3\xf0\xab\x2e\xf2\xb8\xc8\xac\x61\xde\xb6\xec\xc3\xdf\xee\x02\xdc\x07\xee\x2b\xb8\x3a\x1c\xe6\xb3\xe9\x32\xd1\x7b\xdb\x13\x96\x6b\x29\x31\xf7\xae\x8b\xdb\x57\x03\x1e\xc0\x57\xdc\x43\xae\x6b\x43\x49\x72\x05\xbc\x28\x3a\x76\x19\xdc\xf9\x4b\x17\xd0\x6a\xe4\xca\x13\x99\x6b\x84\xc6\x61\x41\xac\x71\xa8\x50\x1a\xb4\xe0\xbc\x6d\x72\x9f\xd1\x74\x3a\x6b\xfc\x28\xa1\xbc\x06\x1e\xf0\x9c\x50\xa5\x44\x30\xdc\xf2\x1a\x3d\xda\x50\x60\x61\xe6\x4e\x01\x8f\x92\xd9\x0c\x84\xbf\x74\x74\xde\xa6\x91\x81\xf9\x4d\xa3\x72\x62\x35\x85\xad\x90\x88\xd7\xa0\x4d\x28\x75\xd0\xb4\xd7\xa0\xbd\xea\xce\x0c\x88\x6b\xee\x84\x63\xf0\x77\x6d\x01\x9f\x78\x6d\x24\x66\xb0\xd7\x0d\xd4\xa2\xac\x3c\x18\xee\x48\xf7\x01\x5f\x14\x64\x7f\x52\x3c\xc8\x58\x5d\x34\x39\x46\x2e\xb8\x82\xca\x7b\xc3\xfe\xc9\x55\x21\x29\xca\x9d\xf0\x15\x20\xcf\xab\x54\xc0\xb0\xe8\xce\x5f\xc2\x4e\x58\x2c\xa0\x31\x11\xd5\x19\xcc\xc5\x46\xe4\x60\xb8\xaf\x18\x2c\xee\x62\x84\xc2\xd1\x09\x6b\xbe\x96\x7b\xe0\x50\x0b\xe7\x63\xf5\x43\x81\x4e\x94\x8a\xf6\x0a\xb5\xd5\x8f\x18\x08\xbd\x8f\xea\xf4\xdd\x12\x82\xc4\x67\xa2\x47\x4d\x08\xa3\x63\x93\x2d\x4f\x39\xce\xa5\x40\xe5\x4f\x39\x1e\x28\x78\xec\x3d\xb9\xa7\x0e\x8d\x80\x58\xfc\x50\x4f\x6a\x92\xc8\x98\x20\x9e\x6b\x8c\x15\x76\x8c\x59\x28\x8f\x76\xc3\xa9\xb6\xc6\xf5\x08\x68\xfd\x71\xe3\x0e\xd0\xb8\xe8\x58\xa9\xe1\x56\x41\x8d\x77\xb8\x7b\x9d\x32\xca\x75\xbd\x16\x2a\x90\x55\xa7\x20\x07\xfa\x66\xc9\x26\x7c\x63\x15\x88\x50\xd4\x14\x61\xce\xa5\x44\x1b\xeb\x3a\x45\xcb\x66\xd3\x90\xd0\x19\xab\xed\x6c\xda\xb6\x96\xab\x12\xe1\x42\xc0\xf5\x0d\xb0\x6e\xc7\xdb\xa8\x09\x79\xde\xa4\x6d\x2f\x04\x7b\xc7\x6b\x3c\x1c\x3a\x04\x00\xe8\xf3\x60\xb7\x7d\x91\xb6\xed\x15\x0d\xd3\xae\xc3\xf3\xf6\xfd\xa9\xa3\xa8\x5a\x61\x31\x88\x74\x09\x83\xd3\x17\xb9\x7f\x82\xe4\x31\xec\x75\xfc\xcc\xa8\x34\x5e\x9a\x35\x6b\xdb\x7f\x68\x5a\x06\x17\x82\x7d\x8c\x3e\xfa\xb0\x37\x98\xb6\x2e\x61\x71\xbe\x28\x1a\xec\x60\x55\x06\x68\xad\xb6\x4b\x22\x66\x32\xe9\x1c\x38\x8c\x52\xc8\xc8\x46\xa8\xa0\xa0\x28\x88\x25\x6d\x11\x9b\xb0\xf6\xc5\x0d\x28\x21\x23\xca\x24\x29\xa4\x84\x0c\x40\x34\x76\x88\xf0\x61\xbc\x3b\x85\xfd\x4c\x80\xcb\x8c\x70\x66\x53\x42\x68\xdb\x44\x75\xe0\xf9\x2d\x75\xda\x09\xd9\xa1\x9b\x2f\x3c\x06\xb2\x93\x90\x43\x01\x2e\x3c\x8e\x6a\x10\x45\x20\xbc\xb1\x6c\x1d\x84\x28\x87\x9b\xe3\x8a\xfb\xd0\x9c\xcb\xf3\xb2\x38\xa5\x81\xc0\xc7\x75\xec\x2e\xbf\xbe\xb5\x5a\x52\xad\xbf\x06\x07\xc3\x51\x90\xa1\x54\x04\xff\x8d\x92\x4a\x20\x63\x64\x9e\x95\x44\xdc\xb8\xed\xe5\x75\xec\x59\xad\x85\x98\xd2\xb2\x31\x65\x47\xb5\x4d\xea\xf6\x73\xdb\x4e\xb2\x34\x11\x85\x48\xd2\x9d\x6a\xf8\x5f\xcb\xcd\x5f\xa5\xbc\x7d\xca\xd1\x78\xd8\x59\x6e\x5c\xb4\xe3\x9e\xca\x8d\x40\x59\xd0\x85\x94\x1a\xf8\xd8\xd1\x41\xed\xe8\x61\xa5\xbe\xa2\x8b\x76\x78\xd9\xb2\xb7\xa2\x28\x24\xee\xb8\x4d\x4f\xa0\x7f\xbb\xee\x55\x44\xef\x00\x63\xe4\x9e\xac\x88\x2c\xd6\x13\x7c\xdd\x2f\x0f\xd7\x08\x6e\xd1\xee\x7b\x65\xa9\xe3\xc8\x69\x5c\xef\x2e\xab\x15\xbc\x37\x74\xcb\x90\xc9\x66\x03\x87\xcb\xb9\xa2\x9b\x96\xee\x26\x2c\x68\xdf\x7a\x0f\x8a\x14\x89\x37\x30\x3e\xe5\xb2\x29\xb0\x88\x6f\xa1\x35\x52\x0c\x94\xb6\xc1\x82\x9d\x33\xb2\x38\x46\x95\xc1\xfc\xde\x73\xdf\xb8\x79\x06\xf3\x0f\x42\x95\xf3\xe5\x6c\xda\x99\xc7\xcb\x81\x7b\xfc\x3f\x00\x18\x61\x26\x3b\xc6\xc3\x18\x73\xde\x0a\x55\xc6\xfa\x12\x2a\x8d\x5f\xdf\x40\xcd\xcd\xa7\x38\xf7\x39\x8a\xd0\x1e\x42\x35\x90\xf7\xfd\xa6\xbf\x4d\x26\xf3\x41\x8d\xcd\xaf\xa1\x3d\x64\xdd\xe6\x54\x09\x93\x50\x0d\x13\xd2\xe5\x0b\x45\x14\xaa\x3a\xe0\xf6\xd1\xb5\xc9\x6a\xbe\x64\xa0\x1f\x69\xbe\x8b\xef\x13\x3e\x7d\x7e\x05\x2f\xf4\x63\x2a\x50\xc3\x95\xc8\x17\x9b\xda\xb3\x7b\x63\x85\xf2\x9b\xc5\xfc\xb6\x03\xe9\xd5\xbc\xfc\x8b\xbb\x84\x42\xa3\x03\xa5\x3d\xe0\x93\x70\xfe\x15\x38\xc4\x61\x11\xf4\x85\xe4\x58\xa9\xe7\x14\xd6\x72\xd9\x1b\x59\x81\x12\x3d\x2e\xba\x20\xc2\xec\x49\x1e\x42\xe5\xc7\x2c\x7a\x2e\x7f\x85\x35\xb1\x09\x20\x37\x37\x70\xc2\x5f\xd7\x87\xa3\xc6\x0c\x37\x83\x0c\x16\xa3\x4b\x96\xc7\xb6\x7c\xa6\x40\xd7\x92\xff\xe2\x6b\x94\x58\x1c\x8b\x24\xfe\xb5\x28\xd1\x77\x45\x3d\x7c\x1a\xc6\xda\xde\x55\xa8\xfa\x59\x3d\xac\xe3\x84\x16\xab\x31\x8b\x0d\x98\x5a\xa4\x89\xab\x21\xfe\x61\xe1\xf1\x6f\x8f\xc8\xe9\x71\x64\x45\x9e\x1e\xaf\x83\x28\x2a\x91\x57\x61\xaf\x43\x35\x16\x44\x7a\x0d\xa4\xed\xdd\x6b\x48\xdb\xee\x2d\x70\x9e\x58\x70\xe6\x58\xd9\xd9\xb9\x8b\x8f\x18\xfb\xa9\x6b\x9d\xe4\xf6\xfb\xcd\xeb\x2c\xae\x2c\xe5\x1a\x78\xb7\x98\xa3\xd8\xc6\xe7\x63\x48\xf3\xd9\xdb\x9c\xc1\x3d\xe2\x11\x67\x00\x13\x66\xba\x77\x6d\xef\x0a\x14\x2a\x55\x68\x81\x9e\x0b\x19\x9e\xa0\x5d\x97\xc5\x3f\x3c\xe9\xf5\xcc\xa5\xf0\x7b\xf6\x43\x8b\x39\xc9\x7f\xe8\x34\xbf\xcc\xeb\x9f\x3e\xf4\x07\xf6\xa1\x93\x7d\xd9\xf8\x93\xf2\x87\xb6\xf4\xbf\x00\x00\x00\xff\xff\x40\x72\xfb\xe6\x18\x11\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xa9, 0x5d, 0x54, 0xca, 0x2a, 0x4e, 0xcd, 0x2a, 0xe2, 0x5f, 0xee, 0x3f, 0xf2, 0xd3, 0xa0, 0x66, 0x3f, 0xb1, 0xf8, 0xcc, 0x20, 0x9e, 0x7e, 0xb8, 0xa, 0x1d, 0x56, 0x36, 0x6d, 0x89, 0x77}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5f\x8f\xda\xba\x12\x7f\x0e\x12\xdf\x61\x1a\xf5\x5e\x05\x89\x3a\x95\xee\xed\x7d\xe0\x96\x87\x76\xd9\xb6\x2b\x75\xb7\x88\xa5\x3d\x8f\x47\x26\x99\x04\xab\x89\x9d\x63\x3b\xd0\x55\xc4\x77\x3f\x1a\x3b\x09\x81\xee\xd2\xee\x79\x81\xc4\x9e\xf9\xcd\x6f\xfe\x27\x8e\xe1\x4a\xa5\x08\x39\x4a\xd4\xdc\x62\x0a\x9b\x07\xb0\xba\x36\x86\xc1\xe2\x0b\xdc\x7d\x59\xc3\xf5\xe2\x66\xcd\xc6\xa3\x38\x86\x15\xea\x5a\x4a\x21\x73\x2f\x01\x7b\x51\x14\xa0\x76\xa8\xf7\x5a\x58\x04\xbb\x15\x06\x32\x51\xa0\x97\xfe\x86\xda\x08\x25\x67\xd0\x34\xac\x7d\x3e\x1c\x86\x37\xb0\xe0\x16\x87\xd7\xf4\x4e\x22\xe3\x51\xc5\x93\xef\x3c\x47\x30\xa8\x77\xa8\xe9\x44\x94\x95\xd2\x16\xa2\xf1\x08\x00\x20\xcc\x0a\x9e\x87\xed\xb3\x32\xdd\x53\x56\xda\x70\x3c\x0a\xc2\x42\xe5\xee\x5f\xa2\xed\xfe\xe3\xad\xb5\xd5\xc9\x4b\x5c\x55\x5a\x65\x21\x81\x07\x71\x0c\xff\x49\x61\xc9\xb5\x7d\x20\x91\x5c\xa9\xbc\x40\x96\xab\x82\xcb\x9c\x29\x9d\xc7\xb9\xae\x92\x5e\x74\x4d\x8e\xde\xa3\xde\x89\x04\xc7\xa3\xa0\xda\x40\xd8\x34\x6c\xf9\xfe\xc6\x71\x5c\x72\xbb\x85\x57\x87\x83\x33\xd6\x34\xec\xf4\x14\x62\xb3\x4b\x9e\xba\xda\x72\x99\x16\xa8\xc9\x9f\x09\x19\xdb\x71\x0d\x0b\xcc\x78\x5d\xd8\x2b\x25\x33\x91\x83\xff\xa3\xbb\xac\x96\x09\x08\x29\x6c\x34\x81\x66\x3c\x0a\x28\x22\xec\xde\x6a\x21\xf3\x6f\x5c\x47\xff\x3e\xd1\x63\x0b\xdc\xd4\xf9\xbb\x34\xd5\x53\x08\x53\x7a\x66\x3c\x4d\x75\x38\x85\x70\xf6\xe6\xf5\xff\x5e\xd3\x83\x13\x01\x2e\x53\x28\xd1\x6a\x91\x18\x28\x84\xb1\x28\x81\x24\xd1\x98\x70\xf2\x4b\x2b\x9f\xd6\xeb\x65\x6b\x84\x22\x3c\xb4\xf1\xc6\xd9\x20\x81\xe7\xc3\x7e\x5c\x2d\xaf\x5a\x58\xca\xc3\x10\xf6\xbf\x0e\x36\x5f\x2d\xaf\x20\x22\xf0\xc9\x23\xe8\x3e\x69\x5f\x0d\x02\xca\x9d\xd0\x4a\x96\x28\x2d\xec\xb8\x16\x7c\x53\xa0\x99\x82\xc8\xc0\xa0\x65\xf0\xa1\xe0\xb9\x81\x2d\xdf\x21\x54\x5a\x28\x2d\xec\x83\x2b\x6f\xb8\x96\x3b\x92\x37\x6c\x3c\x0a\x44\xe6\xb0\x61\x36\x07\x65\xd8\x47\xb4\x28\x77\x51\xb8\xb8\x7e\xff\xf5\xe3\x9f\xef\x16\x8b\x55\x38\xf9\xbf\x17\x78\x31\x87\x30\x74\xa9\x09\x9e\xc8\x05\xcc\x9d\xe4\x78\x14\x1c\x3c\xb0\x2b\xf1\x53\xe0\xe5\x97\xd5\x9a\x20\xdd\xd5\x93\x90\x5d\xe0\x61\x0e\x59\x69\xd9\x7d\xa5\x85\xb4\x59\x14\xce\xfe\x65\xc2\xa9\xd3\x9d\x1c\xad\x3c\x42\x9f\xf4\x7f\x93\xfd\xc0\xd4\x29\xf9\x47\x60\x29\x71\xbf\x09\xdb\xe5\xf8\x04\xd6\xcd\x02\x37\xa2\x5c\xf1\x27\x4a\x5a\x2e\xa4\x01\xbb\x45\xd0\xf8\x57\x2d\x34\xa6\x90\x09\x2c\x52\x03\x99\xd2\xd0\x8d\x27\xde\x0f\x0e\xfb\x50\x61\xa7\x6e\xac\xae\x13\xeb\x8c\xf7\x4e\x18\x57\x73\xe3\x51\x70\x4c\x4a\x7f\xd4\x53\xea\x4e\x0e\x7d\xdf\xdd\xe1\xfe\x5a\xa6\x95\x12\xd2\x9a\xc8\xf8\x49\x00\xd5\x86\x35\x0d\x6b\xe7\x02\xbb\xe3\x25\x1e\x0e\xf7\x8e\xc7\x04\xcc\x2e\x61\xbd\x86\xa3\x10\xc7\xf0\xbe\x36\x42\xa2\x31\x90\xaa\x92\x0b\xc9\xba\x52\xfd\x43\xf3\xaa\x9b\x2f\xb0\x17\x76\x0b\xa5\x48\xd3\x02\xf7\x5c\xa3\x61\x70\x8f\x08\xdd\xa4\x88\x87\x37\xb9\x1a\x8f\x82\x8e\xcd\xbc\x97\x61\x84\xd7\xc2\x75\x64\xfb\xb6\xe8\x48\x1d\x39\x04\x34\x75\xa2\xf1\x28\x68\x1a\xcd\x65\x8e\xf0\x52\x50\x5a\x7b\xc7\x6e\xd1\x6e\x55\x6a\x68\x62\x51\x1a\x9b\x66\xad\x3e\xab\x3d\x6a\x78\x29\x5a\xa7\x7b\xcc\xb9\xf3\xfb\x96\x7f\xc7\xa6\xf9\xe9\x76\x40\x25\x68\x1a\x94\xa9\xc3\xf3\xc4\xb0\x0f\xd5\x6c\x7e\x1a\xbb\xe6\x19\xc4\x7e\x32\x39\xa3\x2d\x71\x81\xf0\xf4\x84\xca\xe1\x24\x1f\x06\x0b\x4c\x68\x41\x1e\xd3\xf8\xdc\xd4\x1c\xbd\x3a\x4b\xce\xb1\x96\x7a\x11\x1f\x07\x8d\xb6\xd6\x12\xfa\xd3\x63\x4b\xac\x6a\x09\xc6\x72\x6d\x0d\x70\x90\xb8\x07\x1a\xb8\x6d\xd9\x4f\xc1\x0d\xc4\xee\x85\x46\x3a\x07\x37\xf5\xdb\x33\xcf\xdc\x6e\xd1\x41\x55\xdc\x18\x4c\xa9\xbb\xa8\x4b\x48\xba\x50\x79\x4e\xdd\xe3\x6a\x7d\x55\xcb\x28\xc9\xba\xd5\xe3\x97\x4d\x57\x64\xb3\x81\x23\x77\xb8\xef\x8a\x6c\x72\x9e\xc2\xc7\xfa\xa5\x2f\xc1\x5b\x4c\xb6\x5c\x8a\x84\x17\x83\x22\x44\xad\x13\xd2\x2c\xf9\x77\x8c\xe8\x1e\x50\x6b\xa5\x7b\xa5\x1b\x69\x51\xeb\xba\xb2\x1d\x01\x52\xca\xd5\x91\x4e\x2f\xf0\xc9\x9f\x44\x84\xd8\xab\xfb\x65\xe7\x77\x45\xaf\x4b\xee\xb6\xdb\x34\x28\x54\xce\x96\x34\x45\x0b\x19\x85\x56\x73\x69\x68\x8a\x86\xdd\xfa\xa4\x87\x76\x0d\x25\xd9\x60\xa4\x7b\x03\x41\xe9\x22\x43\x2b\xb0\x8d\x0a\xde\xd6\x3f\x5c\x58\x82\x92\x79\x42\x51\x18\x3b\x24\xff\x19\x12\x87\x53\x2f\xdf\xb2\xfd\x40\x54\xdc\x0d\xbb\x91\x29\xfe\x98\x5c\xd2\x4d\xca\xb4\x10\x12\x9f\x86\xb8\xf2\x02\x17\x41\xe8\x47\x14\x17\x40\x96\x5e\xe0\x22\x88\x79\x28\x37\xaa\x78\x1a\xe3\xde\xdd\x5f\x84\xb0\x9a\x27\x17\x58\xac\xe9\x7a\xd2\x86\xd9\x15\xc9\xdb\x57\x5e\xf6\xb3\x4b\xe6\x3b\x99\xba\x78\x47\x27\x69\x99\x42\xe9\x16\x60\xd4\x17\x80\xfb\x12\xe9\xf3\xfa\xac\x02\x20\xd5\xb3\xfc\x77\xfb\xc4\x39\xb6\xed\x86\x16\x0d\x3e\xba\xe9\x2b\x70\xd0\xdc\xbf\x26\x7f\xfc\x98\xda\x9e\x71\x77\xdd\xfd\xcf\xb8\x93\x6a\x38\x1d\x52\xef\xb6\x9c\xe3\x54\xc8\x29\xf5\x19\x39\x20\xd1\xb6\xac\xa2\xd0\x26\xd5\x63\xd2\x22\x73\xc2\x2f\xe6\x20\x45\xe1\x2d\xf7\x5e\xa1\xd6\xee\xdd\x4f\x30\x7a\xf4\xe3\x34\x30\x7a\x37\x8c\x0f\x01\xfa\x25\x79\x16\x1e\x37\x37\xdc\xe7\x5e\xd7\x42\xda\x37\x50\xb5\x61\x2b\xcc\x89\x99\x7e\x62\xdd\x46\x66\x0a\x46\xef\xce\x8a\xc4\x30\x1f\xdb\x42\x9e\x85\x73\x55\xcb\x17\xe3\xd1\x69\xd0\xf0\x87\xa0\x78\xbd\x7d\xd5\x4e\x0d\x47\xfe\xef\x00\x00\x00\xff\xff\x7e\x67\x69\x54\x2d\x0d\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3373, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0xdf, 0x9d, 0x84, 0x8f, 0x8, 0xac, 0x9a, 0xdb, 0xe8, 0xa3, 0xd1, 0x12, 0x33, 0xd6, 0x54, 0xba, 0xd3, 0x51, 0x9c, 0x66, 0xf3, 0xd8, 0xd, 0x5b, 0x68, 0x87, 0xf2, 0x30, 0x1b, 0xda, 0x49}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xe2\x38\x14\x7d\x06\x89\xff\x70\x17\x8d\x56\x30\xa2\xce\x3e\x57\xea\xcb\xb4\xb3\x33\xd5\x6e\x3f\xd4\x45\xb3\x0f\xa3\xd1\xc8\x24\x97\xc4\x43\x62\xa7\xb6\xa1\xa5\x16\xff\x7d\x75\x6d\x27\x84\x42\x29\xfb\x96\xd8\xc7\xf7\xe3\x9c\xe3\x9b\x24\x09\x5c\xaa\x0c\x21\x47\x89\x9a\x5b\xcc\x60\xb6\x06\xab\x97\xc6\x30\xb8\xba\x83\xdb\xbb\x29\x7c\xbe\xba\x9e\xb2\x41\x3f\x49\xe0\x01\xf5\x52\x4a\x21\xf3\x80\x80\x27\x51\x96\xa0\x56\xa8\x9f\xb4\xb0\x08\xb6\x10\x06\xe6\xa2\xc4\x80\xfe\x86\xda\x08\x25\xcf\xc1\x39\x16\x9f\x37\x9b\xee\x0e\x5c\x71\x8b\xdd\x6d\x7a\x27\xc8\xa0\x5f\xf3\x74\xc1\x73\x04\xb3\x4a\xe9\x35\x49\x60\xda\x04\x87\x5a\xab\x95\xc8\xd0\x80\x41\xbd\x42\x7d\x66\x44\x86\x30\x13\x32\x13\x32\x37\x30\x57\x1a\x6c\x81\x90\x3f\xdc\x5f\x82\xd5\x5c\x9a\x5a\x69\x1b\x2a\xba\xb6\xb0\xb4\xa2\x14\x2f\x68\x3c\xa6\xdd\x4e\x72\x5d\xa7\xec\x1f\x1f\x8f\x51\x42\x51\xd1\x32\x8c\x06\xfd\xde\x50\xa2\x4d\x0a\x6b\xeb\x21\xbd\xa4\x4a\x5a\x7c\xb6\x43\x02\xf5\x86\xb9\x52\x79\x89\x2c\x57\x25\x97\x39\x53\x3a\xf7\x81\x92\x0a\x2d\xcf\xb8\xe5\x01\x45\x4b\x6d\x26\x18\xe6\xc2\x16\xcb\x19\x4b\x55\x95\xfc\xfa\x95\xe7\x2f\x2f\xc9\x42\xd8\x64\xb7\x94\x70\xb0\xe9\x9a\xea\x12\x29\x0e\xfa\xbd\x7a\x06\x43\xe7\xd8\xfd\xa7\x6b\x5f\xdf\x3d\xb7\x05\x9c\x6d\x36\xc3\x41\x7f\x1c\x69\xba\xe1\x0b\xfc\xf2\x70\x7f\x19\x7a\x81\x8a\x2f\xd0\x00\x07\x83\x16\xd4\x1c\x50\x66\xb5\x12\xd2\x1a\xe0\x2b\x2e\x4a\x3e\x2b\x11\x38\xed\x7b\xb6\x9c\x63\x31\x15\xbb\xe5\x15\x6e\x36\x2d\x21\xf3\xa5\x4c\x5f\x85\x1e\x6d\x63\x7d\x6e\x9e\x26\xa0\x6a\x2b\x94\x34\xc0\x18\xdb\x69\x3b\x72\x7b\xe7\xb7\xc7\x50\xcf\xd8\x1b\xc9\xc0\x0d\xfa\x3d\xd3\x01\x1b\x38\xbf\x80\xef\x3f\xde\x8e\x46\x07\x7a\x87\xb6\x3f\xe1\x5c\x69\x1c\x35\x62\x4c\xd5\x65\xd0\x6e\x3c\x19\xf4\x7b\x9b\xbd\x34\x17\xc0\xeb\x1a\x65\x36\xda\x59\x6e\x5b\x62\x8c\x8d\x07\xfd\x9e\x46\xbb\xd4\x12\x7e\xa7\x84\x21\x8d\x0b\x4a\x39\x07\x53\xf5\xb7\x7a\x42\x0d\x3b\x8d\x01\x19\xba\xe7\x9c\xe6\x32\x47\xf8\x20\xa8\x9d\x16\x70\x83\xb6\x50\x99\xf1\x90\x9e\x73\x4d\x80\x0f\x22\x72\x72\x0e\xbb\x8d\xdd\xe2\x53\x64\x9f\x0e\xf4\x5a\x09\x98\x73\xed\x99\x46\x8d\x89\x87\x5c\x61\xaa\x32\x2f\x5b\x07\xf2\x80\x8f\x4b\x34\x11\xf1\x59\x1e\x44\x98\x5a\x49\x83\x01\xb2\xc3\x08\x63\xcc\xaf\x7a\x1a\x9d\x3b\x23\x53\xf9\x06\x36\x83\xfe\x26\xba\x70\xcb\x0e\x88\xaa\x2e\xb1\x42\xf2\x09\x5d\x39\xe7\xbe\x28\x4f\xcb\x61\xf5\x85\xb4\xa8\xe7\x9c\xcc\x6e\xd7\x35\x76\x03\x19\xab\x97\xa9\x25\x7f\x9c\x40\xe6\x01\x2e\x01\x5e\x91\xf9\x95\xcb\xac\x44\x4d\xf1\xda\x26\x9a\x06\x62\x2c\x3f\x4d\x3a\x35\x58\xb5\xed\xe7\x7f\xb4\xf2\x7e\xc1\xfe\x82\x8d\x0c\x7c\xdc\x26\x1b\x6f\x13\xb4\x3d\x8c\x52\xfb\x0c\x71\x04\xb1\x68\xe7\x09\x68\x7c\x84\x8f\xfe\x4a\x6d\xf1\x51\xe2\xe9\xba\x6e\xca\x1a\xc3\x68\x1f\x14\x54\xee\xa0\x26\x80\x5a\x2b\x4a\x3e\xe8\xf7\x7e\x52\xec\xda\x2f\x51\xe1\x64\xb3\x3d\x5a\xc3\x65\x23\xfb\x50\x71\xbe\x18\xba\x27\x62\xee\x4f\xfd\x76\x01\x52\x94\x3e\x58\x73\x75\xa4\x28\x7d\xc4\x78\x09\xe3\xaa\xc6\x9a\x9d\x52\xdf\x78\x42\x01\xbc\x50\xce\x45\xd1\xbc\x62\x91\xf5\xe0\xf7\x53\x28\x4f\x12\x38\x76\x39\x40\xd0\x5c\x7c\xf5\x85\x08\x07\x22\xe2\x4f\xd2\xcc\x16\xdc\x92\x22\x2b\xd4\x34\x55\x83\xfb\xc3\x30\xdd\x77\xa0\x8e\xa1\xad\x02\x0e\x4b\x83\xfa\x2c\x53\x15\x17\xf2\x18\x98\xc1\xbd\x16\x15\xd7\xa2\x5c\xd3\x91\xf9\xb2\x04\x21\xfd\x44\xef\xce\xe6\x63\x9d\x8c\x7e\xee\x5b\x86\xba\x79\xc0\xc7\xad\x49\x1d\xf9\xa3\xf3\xb6\xe3\x03\x32\xd8\xf9\x45\x73\xe8\x90\x4e\x7b\x66\xeb\x2a\xfb\xf8\x8e\x66\x61\x02\x9d\xa8\xd9\xd1\x71\x75\x50\xb4\x70\xa2\x81\xbc\xa9\xda\xfb\x7a\xc4\x1c\x5e\xbd\x23\x1a\xd7\xe5\xfa\x34\xd1\x8e\xb6\x72\x48\xb5\xb6\x84\x53\x65\x33\x35\x31\xd9\x1c\x3b\xed\x82\x75\x95\x33\xf5\x5b\xd2\x7d\xc5\xb2\x46\x6d\xe8\xcd\xf7\xb2\xf7\x95\x3d\x3c\xaa\xaa\xac\x45\xb2\x9b\xab\xf1\x6b\x80\x2f\x9b\x66\xee\x62\x02\x2b\x5f\xba\x37\x44\x95\x85\x09\x22\xe6\xb0\xda\x19\x29\xe1\x17\x09\x61\x81\x6b\x2f\x7d\x96\xd1\x0f\xac\xb2\x05\xd1\xdd\x24\xa2\x21\x5e\x71\x0b\xa3\xc5\x18\x9e\x0a\x91\x16\x1e\x5a\x96\x50\x92\x74\x4d\x18\x2e\x33\xff\x81\xa2\x3f\x3d\x76\xc9\xa5\x92\x22\xe5\xe5\x57\xe4\x19\xea\xbf\x70\x4d\x7f\x4f\x36\x66\x32\x2a\x18\x48\x58\x48\xb9\x84\x19\xb6\x31\xd2\x14\x8d\xc1\x8c\xb2\xa3\xb0\x05\xea\x98\xdb\x03\x88\x90\x8b\xb6\xe3\x7f\x85\x2d\xbe\xf1\x72\x89\x61\x6c\x52\xc3\xdf\xff\xf8\x31\x7e\x1f\xf9\x46\x81\xa3\xc5\xb8\x13\x22\x7e\x8f\xb7\x5a\xa6\xf6\xd9\xab\xf8\x5f\x00\x00\x00\xff\xff\x11\x97\xdd\x61\xf0\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3056, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x64, 0xa, 0x9f, 0xd2, 0x40, 0xa5, 0x11, 0x61, 0x45, 0xf2, 0xef, 0x63, 0x49, 0x49, 0xe, 0xc, 0xef, 0x54, 0x99, 0x4d, 0x73, 0x4f, 0xef, 0x68, 0x37, 0x20, 0x1a, 0xa4, 0xb7, 0x11, 0x46}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate":    {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate":       {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
