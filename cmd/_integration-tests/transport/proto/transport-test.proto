syntax = "proto3";

package transport;

import "github.com/metaverse/truss/deftree/googlethirdparty/annotations.proto";

service TransportPermutations {
  rpc GetWithQuery (GetWithQueryRequest) returns (GetWithQueryResponse) {
    option (google.api.http) = {
      get: "/getwithquery"
    };
  }
  rpc GetWithRepeatedQuery (GetWithRepeatedQueryRequest) returns (GetWithRepeatedQueryResponse) {
    option (google.api.http) = {
      get: "/getwithrepeatedquery"
    };
  }
  rpc GetWithRepeatedStringQuery (GetWithRepeatedStringQueryRequest) returns (GetWithRepeatedStringQueryResponse) {
    option (google.api.http) = {
      get: "/getwithrepeatedstringquery"
    };
  }
  rpc GetWithEnumQuery (GetWithEnumQueryRequest) returns (GetWithEnumQueryResponse) {
    option (google.api.http) = {
      get: "/getwithenumquery"
    };
  }
  rpc PostWithNestedMessageBody (PostWithNestedMessageBodyRequest) returns (PostWithNestedMessageBodyResponse) {
    option (google.api.http) = {
      post: "/postwithnestedmessagebody"
      body: "*"
    };
  }
  rpc CtxToCtx (MetaRequest) returns (MetaResponse){
    option (google.api.http) = {
      post: "/ctxtoctx"
      body: "*"
    };
  }
  rpc GetWithCapsPath(GetWithQueryRequest) returns (GetWithQueryResponse) {
    option (google.api.http) = {
      get: "/get/With/CapsPath"
    };
  }
  rpc GetWithPathParams(GetWithQueryRequest) returns (GetWithQueryResponse) {
    option (google.api.http) = {
      get: "/path/{A}/{B}"
    };
  }
  rpc GetWithEnumPath(GetWithEnumQueryRequest) returns (GetWithEnumQueryResponse) {
    option (google.api.http) = {
      get: "/getwithenumpath/{in}"
    };
  }
  rpc GetWithOneofQuery(GetWithOneofRequest) returns (GetWithOneofResponse) {
    option (google.api.http) = {
      get: "/getwithoneof"
    };
  }
  rpc EchoOddNames (OddFieldNames) returns (OddFieldNames) {
  /* Ensure that strange field names survive the encode/decode phases */
    option (google.api.http) = {
      post: "/echooddnames"
      body: "*"
    };
  }
  rpc ErrorRPC (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/error"
    };
  }
  rpc ErrorRPCNonJSON (Empty) returns (Empty) {
    option (google.api.http) = {
      post: "/error/non/json"
      body: "*"
    };
  }
  rpc ErrorRPCNonJSONLong (Empty) returns (Empty) {
    option (google.api.http) = {
      post: "/error/non/json/long"
      body: "*"
    };
  }
  /* Odd RPC names need to still work */
  rpc _2aOddRPCName (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/oddrpcname"
    };
  }
  rpc ContentTypeTest (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/content/type"
    };
  }
  rpc StatusCodeAndNilHeaders (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/status/code"
    };
  }
  rpc StatusCodeAndHeaders (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/status/code/and/headers"
    };
  }
  rpc CustomVerb (GetWithQueryRequest) returns (GetWithQueryResponse) {
    option (google.api.http) = {
      custom {
        kind: "CUSTOMVERB"
        path: "/customverb"
      }
    };
  }
}

message Empty {}

message GetWithQueryRequest {
  int64 A = 1;
  int64 B = 2;
}

message GetWithQueryResponse {
  int64 V = 1;
}

message GetWithRepeatedQueryRequest {
  repeated int64 A = 1;
}

message GetWithRepeatedQueryResponse {
  int64 V = 1;
}

message GetWithRepeatedStringQueryRequest {
  repeated string A = 1;
}

message GetWithRepeatedStringQueryResponse {
  string V = 1;
}

enum TestStatus {
  test_failed = 0;
  test_passed = 1;
}

message GetWithEnumQueryRequest {
  TestStatus in = 1;
}

message GetWithEnumQueryResponse {
  TestStatus out = 1;
}

message PostWithNestedMessageBodyRequest {
  NestedMessage NM = 1;
}

message NestedMessage {
  int64 A = 1;
  int64 B = 2;
}

message PostWithNestedMessageBodyResponse {
  int64 V = 1;
}

message MetaRequest{
  string Key = 1;
}

message MetaResponse {
  string V = 1;
}

message OddFieldNames {
  int64 snake_case = 1;
  int64 camelCase = 2;
  int64 __why__so__many__underscores = 3;
}

message GetWithOneofRequest {
  oneof aorb {
    int64 a = 1;
    int64 b = 2;
  }
}

message GetWithOneofResponse {
    int64 a = 1;
    int64 b = 2;
}
