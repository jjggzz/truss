syntax = "proto3";

package middlewares;

import "github.com/metaverse/truss/deftree/googlethirdparty/annotations.proto";

service MiddlewaresTest {
  // Test endpoints.WrapAllExcept(middleware, exclude ...)
  // AlwaysWrapped will never be excluded in endpoints.WrapAllExcept
  rpc AlwaysWrapped (Empty) returns (WrapAllExceptTest) {
    option (google.api.http) = {
      get: "/alwayswrapped"
    };
  }
  // SometimesWrapped will be excluded from the middleware that set the
  // NotSometimes value
  rpc SometimesWrapped (Empty) returns (WrapAllExceptTest) {
    option (google.api.http) = {
      get: "/sometimeswrapped"
    };
  }

  // LabeledTestHandler will be used to test WrapAllLabeledExcept
  rpc LabeledTestHandler (Empty) returns (LabeledTest) {};
}

message Empty {}

// WrapAllExceptTest will be populated by middlewares which were wrapped
// around endpoints using WrapAllExcept
message WrapAllExceptTest {
  // Always will be set to true
  bool Always = 1;
  // NotSometimes will be set to true for endpoint AlwaysWrapped and set to
  // false for SometimesWrapped
  bool NotSometimes = 2;
}

// Labeled will be populated by a middleware which was wrapped
// around endpoints using WrapAllLabeledExcept
message LabeledTest {
  // Will be populated with "LabeledTestHandler"
  string Name = 1;
}
